<?xml version="1.0" encoding="UTF-8"?>
<beans default-lazy-init="true"
       xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task-3.2.xsd">

    <context:property-placeholder location="classpath:user.properties" ignore-unresolvable="true" />
    <context:property-placeholder location="classpath:druid.properties" ignore-unresolvable="true" />

    <!-- 对该包及其子包下的注解进行扫描，以完成Bean创建和自动依赖注入的功能  -->
    <context:component-scan base-package="net.wanho" />
    <!--开启定时任务定时扫描-->
    <!--<task:annotation-driven />-->
    <!-- 通过注解，把URL映射到Controller上，该标签默认注册DefaultAnnotationHandlerMapping和AnnotationMethodHandlerAdapter -->
    <mvc:annotation-driven />

    <!-- 视图解析器 -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"></property>
    </bean>


    <!--  文件上传  -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">

        <!-- one of the properties available; the maximum file size in bytes -->
        <property name="maxUploadSize" value="100000000"/>
    </bean>
    <!--
        <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource" p:basename="i18n/messages"/>
    -->
    <!-- Mapping exception to the handler view -->
  <!--  <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        &lt;!&ndash;to /commons/error.jsp &ndash;&gt;
        <property name="defaultErrorView" value="/commons/error"/>
        <property name="exceptionMappings">
            <props>
                <prop key="org.apache.shiro.authz.UnauthorizedException">/commons/error/403</prop>
            </props>
        </property>
    </bean>-->

    <!-- 当在web.xml 中   DispatcherServlet使用 <url-pattern>/</url-pattern> 映射时，能映射静态资源 -->
    <mvc:default-servlet-handler />
    <!-- 静态资源映射 -->
  <!--  <mvc:resources mapping="/static/**" location="/WEB-INF/static/" />-->

    <!--配置拦截器, 多个拦截器,顺序执行 -->
    <!--<mvc:interceptors>-->
        <!--<mvc:interceptor>-->
            <!--&lt;!&ndash; 匹配的是url路径， 如果不配置或/**,将拦截所有的Controller &ndash;&gt;-->
            <!--<mvc:mapping path="/buyerOrders/**" />-->
            <!--<mvc:mapping path="/sellerOrders/**" />-->
            <!--<bean class="net.wanho.filter.userInfoFilter">-->
                <!--<property name="uncheckUrls">-->
                    <!--&lt;!&ndash;免登陆校验地址&ndash;&gt;-->
                    <!--<list>-->
                        <!--<value>/user/showLogin</value>-->
                        <!--<value>/login</value>-->
                    <!--</list>-->
                <!--</property>-->
            <!--</bean>-->
        <!--</mvc:interceptor>-->
        <!--&lt;!&ndash; 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法 &ndash;&gt;-->
    <!--</mvc:interceptors>-->

</beans>