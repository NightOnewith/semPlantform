<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    			http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    			http://www.springframework.org/schema/tx
				http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
				http://www.springframework.org/schema/context
				http://www.springframework.org/schema/context/spring-context-3.0.xsd">

    <!-- 引入jdbc配置文件 -->
    <context:property-placeholder location="classpath:user.properties" ignore-unresolvable="true" />
    <context:property-placeholder location="classpath:druid.properties" ignore-unresolvable="true" />

    <!-- 微代理jndi数据源 -->
    <!--<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">-->
    <!--<property name="jndiName">-->
    <!--<value>${webApp.jndiDataSource}</value>-->
    <!--</property>-->
    <!--</bean>-->


   <!-- <bean id="dataSourceMaster"
          class="org.springframework.jndi.JndiObjectFactoryBean">
        <property name="jndiName">
            <value>${mgrApp.jndiDataSource}</value>
        </property>
        <property name="resourceRef">
            <value>true</value>
        </property>
        <property name="defaultObject" ref="dataSourceSlave">
        </property>
    </bean>

    &lt;!&ndash;sca数据源&ndash;&gt;
    <bean id="dataSourceSlave" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${sca.db.url.driverClassName}" />
        <property name="url" value="${sca.db.url}" />
        <property name="username" value="${sca.db.username}" />
        <property name="password" value="${sca.db.password}" />
        <property name="initialSize" value="1" />
        <property name="maxActive" value="100" />
        <property name="maxIdle" value="5" />
        <property name="minIdle" value="1" />
        <property name="maxWait" value="6000" />
        <property name="removeAbandoned" value="true" />
        <property name="removeAbandonedTimeout" value="180" />
        <property name="logAbandoned" value="true" />
        <property name="testOnBorrow" value="true"/>
        <property name="validationQuery" value="SELECT 1"/>
    </bean>-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <!-- 数据库基本信息配置 -->
        <property name="url" value="${url}" />
        <property name="username" value="${druidusersname}" />
        <property name="password" value="${password}" />
        <property name="driverClassName" value="${driverClassName}" />
        <property name="filters" value="${filters}" />
        <!-- 最大并发连接数 -->
        <property name="maxActive" value="${maxActive}" />
        <!-- 初始化连接数量 -->
        <property name="initialSize" value="${initialSize}" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${maxWait}" />
        <!-- 最小空闲连接数 -->
        <property name="minIdle" value="${minIdle}" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />
        <property name="validationQuery" value="${validationQuery}" />
        <property name="testWhileIdle" value="${testWhileIdle}" />
        <property name="testOnBorrow" value="${testOnBorrow}" />
        <property name="testOnReturn" value="${testOnReturn}" />
        <property name="maxOpenPreparedStatements" value="${maxOpenPreparedStatements}" />
        <!-- 打开 removeAbandoned 功能 -->
        <property name="removeAbandoned" value="${removeAbandoned}" />
        <!-- 1800 秒，也就是 30 分钟 -->
        <property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" />
        <!-- 关闭 abanded 连接时输出错误日志 -->
        <property name="logAbandoned" value="${logAbandoned}" />
    </bean>

    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!-- 声明注解式事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- 分页 -->
    <bean id="paginationInterceptor" class="net.wanho.page.PaginationInterceptor"></bean>


    <!-- 创建SqlSessionFactory，同时指定数据源 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />

        <!--分页插件，拦截mybatis ID 为queryAll*的方法-->
        <property name="plugins"> <list><ref bean="paginationInterceptor"/></list></property>
    </bean>

    <!-- Mapper接口所在包名，Spring会自动查找其下的Mapper -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="net.wanho.mapper;" />
    </bean>

</beans>